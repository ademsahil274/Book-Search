{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["AuthService","_classCallCheck","_createClass","key","value","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","_templateObject","_taggedTemplateLiteral","ADD_USER","_templateObject2","SAVE_BOOK","_templateObject3","REMOVE_BOOK","_templateObject4","SearchBooks","_useState","useState","_useState2","_slicedToArray","searchedBooks","setSearchedBooks","_useState3","_useState4","searchInput","setSearchInput","_useState5","_useState6","setSavedBookIds","_useMutation","useMutation","_useMutation2","saveBook","error","useEffect","bookIdArr","length","handleFormSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","response","_yield$response$json","items","bookData","wrap","_context","prev","next","preventDefault","abrupt","fetch","concat","sent","ok","Error","json","map","book","_book$volumeInfo$imag","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","t0","console","stop","_x","apply","arguments","handleSaveBook","_ref2","_callee2","bookToSave","_yield$saveBook","_context2","find","Auth","loggedIn","variables","input","data","_toConsumableArray","_x2","_jsxs","_Fragment","children","_jsx","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","_useQuery","useQuery","loading","removeBook","userData","me","handleDeleteBook","_yield$removeBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","_event$target","_objectSpread","_defineProperty","_yield$addUser","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","_yield$login","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","SignUpForm","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","cache","InMemoryCache","App","ApolloProvider","Router","Routes","Route","path","element","render","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"qVAgDe,MA5CE,oBAAAA,IAAAC,YAAA,KAAAD,EAAA,CAyCd,OAzCcE,YAAAF,EAAA,EAAAG,IAAA,aAAAC,MAEf,WACE,OAAOC,IAAOC,KAAKC,WACrB,GAEA,CAAAJ,IAAA,WAAAC,MACA,WAEE,IAAMI,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,EACzC,GAEA,CAAAL,IAAA,iBAAAC,MACA,SAAeI,GACb,IAEE,OADgBH,IAAOG,GACXE,IAAMC,KAAKC,MAAQ,GAGjC,CAAE,MAAOC,GACP,OAAO,CACT,CACF,GAAC,CAAAV,IAAA,WAAAC,MAED,WAEE,OAAOU,aAAaC,QAAQ,WAC9B,GAAC,CAAAZ,IAAA,QAAAC,MAED,SAAMY,GAEJF,aAAaG,QAAQ,WAAYD,GACjCE,OAAOC,SAASC,OAAO,IACzB,GAAC,CAAAjB,IAAA,SAAAC,MAED,WAEEU,aAAaO,WAAW,YAExBH,OAAOC,SAASC,OAAO,IACzB,KAACpB,CAAA,CAzCc,ICYJsB,EAAe,SAACC,GAC3B,IAAMC,EAAeV,aAAaC,QAAQ,eACtCU,KAAKC,MAAMZ,aAAaC,QAAQ,gBAChC,KAEJ,IAAKS,EACH,OAAO,EAGT,IAAMG,EAAkC,OAAZH,QAAY,IAAZA,OAAY,EAAZA,EAAcI,QAAO,SAACC,GAAW,OAAKA,IAAgBN,CAAM,IAGxF,OAFAT,aAAaG,QAAQ,cAAeQ,KAAKK,UAAUH,KAE5C,CACT,E,gBC3BaI,EAAaC,YAAGC,MAAAC,YAAA,qLAWhBC,EAAWH,YAAGI,MAAAF,YAAA,iaAsBdG,EAAYL,YAAGM,MAAAJ,YAAA,4SAoBfK,EAAcP,YAAGQ,MAAAN,YAAA,uS,gBCiGfO,EA9IK,WAElB,IAAAC,EAA0CC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/CI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GAEtCI,EAAsCL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAGlCG,EAAwCT,mBFhBnB7B,aAAaC,QAAQ,eACtCU,KAAKC,MAAMZ,aAAaC,QAAQ,gBAChC,IEc+DsC,EAAAR,YAAAO,EAAA,GAA5D5B,EAAY6B,EAAA,GAAEC,EAAeD,EAAA,GAEpCE,EAA4BC,YAAYnB,GAAWoB,EAAAZ,YAAAU,EAAA,GAA5CG,EAAQD,EAAA,GAAQA,EAAA,GAALE,MAIlBC,qBAAU,WACR,OAAO,WFhBgB,IAACC,KEgBCrC,GFfbsC,OACZhD,aAAaG,QAAQ,cAAeQ,KAAKK,UAAU+B,IAEnD/C,aAAaO,WAAW,cEYe,CACzC,IAIA,IAAM0C,EAAgB,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,EAAOC,GAAK,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,cAAAQ,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACZ,GAAvBR,EAAMS,iBAED5B,EAAY,CAADyB,EAAAE,KAAA,eAAAF,EAAAI,OAAA,UACP,GAAK,cAAAJ,EAAAC,KAAA,EAAAD,EAAAE,KAAA,ECsBTG,MAAM,iDAADC,ODlBiC/B,IAAa,KAAD,EAAvC,IAARoB,EAAQK,EAAAO,MAEAC,GAAG,CAADR,EAAAE,KAAA,cACR,IAAIO,MAAM,yBAAyB,KAAD,SAAAT,EAAAE,KAAA,GAGlBP,EAASe,OAAO,KAAD,GAAAd,EAAAI,EAAAO,KAA/BV,EAAKD,EAALC,MAEFC,EAAWD,EAAMc,KAAI,SAACC,GAAI,IAAAC,EAAA,MAAM,CACpCjE,OAAQgE,EAAKE,GACbC,QAASH,EAAKI,WAAWD,SAAW,CAAC,wBACrCE,MAAOL,EAAKI,WAAWC,MACvBC,YAAaN,EAAKI,WAAWE,YAC7BC,OAAiC,QAA1BN,EAAAD,EAAKI,WAAWI,kBAAU,IAAAP,OAAA,EAA1BA,EAA4BQ,YAAa,GACjD,IAEDjD,EAAiB0B,GACjBtB,EAAe,IAAIwB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAsB,GAAAtB,EAAA,SAEnBuB,QAAQvC,MAAKgB,EAAAsB,IAAM,yBAAAtB,EAAAwB,OAAA,GAAA/B,EAAA,mBAEtB,gBA7BqBgC,GAAA,OAAApC,EAAAqC,MAAA,KAAAC,UAAA,KAgChBC,EAAc,eAAAC,EAAAvC,YAAAC,cAAAC,MAAG,SAAAsC,EAAOlF,GAAM,IAAAmF,EAAAC,EAAA,OAAAzC,cAAAQ,MAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,OAKqB,GAHjD6B,EAAa5D,EAAc+D,MAAK,SAACtB,GAAI,OAAKA,EAAKhE,SAAWA,CAAM,IAGxDuF,EAAKC,WAAaD,EAAKvG,WAAa,KAEvC,CAADqG,EAAA/B,KAAA,eAAA+B,EAAA7B,OAAA,UACD,GAAK,cAAA6B,EAAAhC,KAAA,EAAAgC,EAAA/B,KAAA,EAQWnB,EAAS,CAC9BsD,UAAW,CAAEC,MAAOP,KACnB,KAAD,EAAAC,EAAAC,EAAA1B,KAFUyB,EAAJO,KAKR5D,EAAgB,GAAD2B,OAAAkC,YAAK3F,GAAY,CAAEkF,EAAWnF,UAASqF,EAAA/B,KAAA,iBAAA+B,EAAAhC,KAAA,GAAAgC,EAAAX,GAAAW,EAAA,SAEtDV,QAAQvC,MAAKiD,EAAAX,IAAM,yBAAAW,EAAAT,OAAA,GAAAM,EAAA,mBAEtB,gBAzBmBW,GAAA,OAAAZ,EAAAH,MAAA,KAAAC,UAAA,KA2BpB,OACEe,eAAAC,WAAA,CAAAC,SAAA,CACEC,cAACC,IAAS,CAACC,OAAK,EAACC,UAAU,qBAAoBJ,SAC7CF,eAACO,IAAS,CAAAL,SAAA,CACRC,cAAA,MAAAD,SAAI,sBACJC,cAACK,IAAI,CAACC,SAAU/D,EAAiBwD,SAC/BF,eAACQ,IAAKE,IAAG,CAAAR,SAAA,CACPC,cAACQ,IAAG,CAACC,GAAI,GAAIC,GAAI,EAAEX,SACjBC,cAACK,IAAKM,QAAO,CACXC,KAAK,cACLhI,MAAO8C,EACPmF,SAAU,SAACC,GAAC,OAAKnF,EAAemF,EAAEC,OAAOnI,MAAM,EAC/CoI,KAAK,OACLC,KAAK,KACLC,YAAY,wBAGhBlB,cAACQ,IAAG,CAACC,GAAI,GAAIC,GAAI,EAAEX,SACjBC,cAACmB,IAAM,CAACH,KAAK,SAASI,QAAQ,UAAUH,KAAK,KAAIlB,SAAC,8BAS5DF,eAACO,IAAS,CAAAL,SAAA,CACRC,cAAA,MAAAD,SACGzE,EAAcgB,OAAM,WAAAmB,OACNnC,EAAcgB,OAAM,aAC/B,+BAEN0D,cAACqB,IAAW,CAAAtB,SACTzE,EAAcwC,KAAI,SAACC,GAClB,OACE8B,eAACyB,IAAI,CAAmBC,OAAO,OAAMxB,SAAA,CAClChC,EAAKO,MACJ0B,cAACsB,IAAKE,IAAG,CAACC,IAAK1D,EAAKO,MAAOoD,IAAG,iBAAAjE,OAAmBM,EAAKK,OAASgD,QAAQ,QACrE,KACJvB,eAACyB,IAAKK,KAAI,CAAA5B,SAAA,CACRC,cAACsB,IAAKM,MAAK,CAAA7B,SAAEhC,EAAKK,QAClByB,eAAA,KAAGM,UAAU,QAAOJ,SAAA,CAAC,YAAUhC,EAAKG,WACpC8B,cAACsB,IAAKO,KAAI,CAAA9B,SAAEhC,EAAKM,cAChBiB,EAAKC,YACJS,cAACmB,IAAM,CACLW,SAAsB,OAAZ9H,QAAY,IAAZA,OAAY,EAAZA,EAAc+H,MAAK,SAAC1H,GAAW,OAAKA,IAAgB0D,EAAKhE,MAAM,IACzEoG,UAAU,qBACV6B,QAAS,kBAAMjD,EAAehB,EAAKhE,OAAO,EAACgG,SAC9B,OAAZ/F,QAAY,IAAZA,KAAc+H,MAAK,SAAC1H,GAAW,OAAKA,IAAgB0D,EAAKhE,MAAM,IAC5D,oCACA,yBAfDgE,EAAKhE,OAqBpB,WAKV,E,SEpJakI,EAASzH,YAAGC,MAAAC,YAAA,4OCkGVwH,EAxFI,WACjB,IAAAC,EAA0BC,YAASH,GAA3BI,EAAOF,EAAPE,QAAS3C,EAAIyC,EAAJzC,KACjB3D,EAAgCC,YAAYjB,GAAYkB,EAAAZ,YAAAU,EAAA,GAAjDuG,EAAUrG,EAAA,GAEXsG,GAFoBtG,EAAA,GAALE,OAEA,OAAJuD,QAAI,IAAJA,OAAI,EAAJA,EAAM8C,KAAM,IAGvBC,EAAgB,eAAAjG,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,EAAO7C,GAAM,IAAA2I,EAAA,OAAAhG,cAAAQ,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACmB,GAAzCiC,EAAKC,WAAaD,EAAKvG,WAAa,KAEvC,CAADoE,EAAAE,KAAA,eAAAF,EAAAI,OAAA,UACD,GAAK,cAAAJ,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAMWiF,EAAW,CAChC9C,UAAW,CAAEzF,YACZ,KAAD,EAAA2I,EAAAvF,EAAAO,KAFUgF,EAAJhD,KASR5F,EAAaC,GAAQoD,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAsB,GAAAtB,EAAA,SAErBuB,QAAQvC,MAAKgB,EAAAsB,IAAM,yBAAAtB,EAAAwB,OAAA,GAAA/B,EAAA,mBAEtB,gBAvBqBgC,GAAA,OAAApC,EAAAqC,MAAA,KAAAC,UAAA,KA0BtB,OAAIuD,EACKrC,cAAA,MAAAD,SAAI,eASXF,eAAAC,WAAA,CAAAC,SAAA,CACEC,cAACC,IAAS,CAACC,OAAK,EAACC,UAAU,qBAAoBJ,SAC7CC,cAACI,IAAS,CAAAL,SACRC,cAAA,MAAAD,SAAI,6BAGRF,eAACO,IAAS,CAAAL,SAAA,CACRC,cAAA,MAAAD,SACGwC,EAASI,WAAWrG,OAAM,WAAAmB,OACZ8E,EAASI,WAAWrG,OAAM,WAAAmB,OACJ,IAA/B8E,EAASI,WAAWrG,OAAe,OAAS,QAAO,KAErD,6BAEN0D,cAACqB,IAAW,CAAAtB,SACTwC,EAASI,WAAW7E,KAAI,SAACC,GACxB,OACE8B,eAACyB,IAAI,CAAmBC,OAAO,OAAMxB,SAAA,CAClChC,EAAKO,MACJ0B,cAACsB,IAAKE,IAAG,CACPC,IAAK1D,EAAKO,MACVoD,IAAG,iBAAAjE,OAAmBM,EAAKK,OAC3BgD,QAAQ,QAER,KACJvB,eAACyB,IAAKK,KAAI,CAAA5B,SAAA,CACRC,cAACsB,IAAKM,MAAK,CAAA7B,SAAEhC,EAAKK,QAClByB,eAAA,KAAGM,UAAU,QAAOJ,SAAA,CAAC,YAAUhC,EAAKG,WACpC8B,cAACsB,IAAKO,KAAI,CAAA9B,SAAEhC,EAAKM,cACjB2B,cAACmB,IAAM,CACLhB,UAAU,uBACV6B,QAAS,kBAAMS,EAAiB1E,EAAKhE,OAAO,EAACgG,SAC9C,2BAfMhC,EAAKhE,OAqBpB,WAKV,E,qDCsCe6I,EAhII,WAEjB,IAAA1H,EAAwCC,mBAAS,CAC/C0H,SAAU,GACVC,MAAO,GACPC,SAAU,KACV3H,EAAAC,YAAAH,EAAA,GAJK8H,EAAY5H,EAAA,GAAE6H,EAAe7H,EAAA,GAMpCI,EAAoBL,oBAAS,GAAtB+H,EAA4B7H,YAAAG,EAAA,GAAnB,GAEhBI,EAAkCT,oBAAS,GAAMU,EAAAR,YAAAO,EAAA,GAA1CuH,EAAStH,EAAA,GAAEuH,EAAYvH,EAAA,GAE9BE,EAAkBC,YAAYrB,GAAvB0I,EAAgChI,YAAAU,EAAA,GAAzB,GAERuH,EAAoB,SAACzG,GACzB,IAAA0G,EAAwB1G,EAAMkE,OAAtBH,EAAI2C,EAAJ3C,KAAMhI,EAAK2K,EAAL3K,MACdqK,EAAeO,wBAAC,CAAC,EAAIR,GAAY,GAAAS,YAAA,GAAG7C,EAAOhI,IAC7C,EAEM2D,EAAgB,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,EAAOC,GAAK,IAAA6G,EAAAhE,EAAA,OAAAhD,cAAAQ,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAQlC,OAPDR,EAAMS,kBAIuB,IADhBT,EAAM8G,cACVC,kBACP/G,EAAMS,iBACNT,EAAMgH,mBACP1G,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAQwBgG,EAAQ,CAC7B7D,UAASgE,YAAA,GAAOR,KACf,KAAD,EAAAU,EAAAvG,EAAAO,KAFMgC,EAAIgE,EAAJhE,KAIRJ,EAAKwE,MAAMpE,EAAK2D,QAAQrK,OAAOmE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAsB,GAAAtB,EAAA,SAE/BuB,QAAQvC,MAAKgB,EAAAsB,IACb2E,GAAa,GAAM,QAGrBH,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KACT,yBAAA5F,EAAAwB,OAAA,GAAA/B,EAAA,mBACJ,gBA/BqBgC,GAAA,OAAApC,EAAAqC,MAAA,KAAAC,UAAA,KAiCtB,OACEkB,cAAAF,WAAA,CAAAC,SAEEF,eAACQ,IAAI,CAAC0D,YAAU,EAACb,UAAWA,EAAW5C,SAAU/D,EAAiBwD,SAAA,CAEhEC,cAACgE,IAAK,CACJC,aAAW,EACXC,QAAS,kBAAMd,GAAa,EAAM,EAClCe,KAAMhB,EACN/B,QAAQ,SAAQrB,SACjB,2CAIDF,eAACQ,IAAK+D,MAAK,CAAArE,SAAA,CACTC,cAACK,IAAKgE,MAAK,CAACC,QAAQ,WAAUvE,SAAC,aAC/BC,cAACK,IAAKM,QAAO,CACXK,KAAK,OACLE,YAAY,gBACZN,KAAK,WACLC,SAAUyC,EACV1K,MAAOoK,EAAaH,SACpB0B,UAAQ,IAEVvE,cAACK,IAAKM,QAAQ6D,SAAQ,CAACxD,KAAK,UAASjB,SAAC,6BAKxCF,eAACQ,IAAK+D,MAAK,CAAArE,SAAA,CACTC,cAACK,IAAKgE,MAAK,CAACC,QAAQ,QAAOvE,SAAC,UAC5BC,cAACK,IAAKM,QAAO,CACXK,KAAK,QACLE,YAAY,qBACZN,KAAK,QACLC,SAAUyC,EACV1K,MAAOoK,EAAaF,MACpByB,UAAQ,IAEVvE,cAACK,IAAKM,QAAQ6D,SAAQ,CAACxD,KAAK,UAASjB,SAAC,0BAKxCF,eAACQ,IAAK+D,MAAK,CAAArE,SAAA,CACTC,cAACK,IAAKgE,MAAK,CAACC,QAAQ,WAAUvE,SAAC,aAC/BC,cAACK,IAAKM,QAAO,CACXK,KAAK,WACLE,YAAY,gBACZN,KAAK,WACLC,SAAUyC,EACV1K,MAAOoK,EAAaD,SACpBwB,UAAQ,IAEVvE,cAACK,IAAKM,QAAQ6D,SAAQ,CAACxD,KAAK,UAASjB,SAAC,6BAIxCC,cAACmB,IAAM,CACLW,WAEIkB,EAAaH,UACbG,EAAaF,OACbE,EAAaD,UAGjB/B,KAAK,SACLI,QAAQ,UAASrB,SAClB,eAMT,ECtCe0E,EAtFG,WAChB,IAAAvJ,EAAwCC,mBAAS,CAAE2H,MAAO,GAAIC,SAAU,KAAK3H,EAAAC,YAAAH,EAAA,GAAtE8H,EAAY5H,EAAA,GAAE6H,EAAe7H,EAAA,GACpCI,EAAoBL,oBAAS,GAAtB+H,EAA4B7H,YAAAG,EAAA,GAAnB,GAChBI,EAAkCT,oBAAS,GAAMU,EAAAR,YAAAO,EAAA,GAA1CuH,EAAStH,EAAA,GAAEuH,EAAYvH,EAAA,GAC9BE,EAAgBC,YAAYzB,GAArBuJ,EAAgCzI,YAAAU,EAAA,GAA3B,GAENuH,EAAoB,SAACzG,GACzB,IAAA0G,EAAwB1G,EAAMkE,OAAtBH,EAAI2C,EAAJ3C,KAAMhI,EAAK2K,EAAL3K,MACdqK,EAAeO,wBAAC,CAAC,EAAIR,GAAY,GAAAS,YAAA,GAAG7C,EAAOhI,IAC7C,EAEM2D,EAAgB,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,EAAOC,GAAK,IAAA6H,EAAAhF,EAAA,OAAAhD,cAAAQ,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAQlC,OAPDR,EAAMS,kBAIuB,IADhBT,EAAM8G,cACVC,kBACP/G,EAAMS,iBACNT,EAAMgH,mBACP1G,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAQwByG,EAAM,CAC3BtE,UAASgE,YAAA,GAAMR,KACd,KAAD,EAAA0B,EAAAvH,EAAAO,KAFMgC,EAAIgF,EAAJhF,KAIRJ,EAAKwE,MAAMpE,EAAKoE,MAAM9K,OAAOmE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAsB,GAAAtB,EAAA,SAE7BuB,QAAQvC,MAAKgB,EAAAsB,IACb2E,GAAa,GAAM,QAGrBH,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KACT,yBAAA5F,EAAAwB,OAAA,GAAA/B,EAAA,mBACJ,gBA/BqBgC,GAAA,OAAApC,EAAAqC,MAAA,KAAAC,UAAA,KAiCtB,OACEkB,cAAAF,WAAA,CAAAC,SACEF,eAACQ,IAAI,CAAC0D,YAAU,EAACb,UAAWA,EAAW5C,SAAU/D,EAAiBwD,SAAA,CAChEC,cAACgE,IAAK,CAACC,aAAW,EAACC,QAAS,kBAAMd,GAAa,EAAM,EAAEe,KAAMhB,EAAW/B,QAAQ,SAAQrB,SAAC,sDAGzFF,eAACQ,IAAK+D,MAAK,CAAArE,SAAA,CACTC,cAACK,IAAKgE,MAAK,CAACC,QAAQ,QAAOvE,SAAC,UAC5BC,cAACK,IAAKM,QAAO,CACXK,KAAK,OACLE,YAAY,aACZN,KAAK,QACLC,SAAUyC,EACV1K,MAAOoK,EAAaF,MACpByB,UAAQ,IAEVvE,cAACK,IAAKM,QAAQ6D,SAAQ,CAACxD,KAAK,UAASjB,SAAC,0BAGxCF,eAACQ,IAAK+D,MAAK,CAAArE,SAAA,CACTC,cAACK,IAAKgE,MAAK,CAACC,QAAQ,WAAUvE,SAAC,aAC/BC,cAACK,IAAKM,QAAO,CACXK,KAAK,WACLE,YAAY,gBACZN,KAAK,WACLC,SAAUyC,EACV1K,MAAOoK,EAAaD,SACpBwB,UAAQ,IAEVvE,cAACK,IAAKM,QAAQ6D,SAAQ,CAACxD,KAAK,UAASjB,SAAC,6BAExCC,cAACmB,IAAM,CACLW,WAAYkB,EAAaF,OAASE,EAAaD,UAC/C/B,KAAK,SACLI,QAAQ,UAASrB,SAAC,eAM5B,EClBe4E,EApEG,WAEhB,IAAAzJ,EAAkCC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAA1C0J,EAASxJ,EAAA,GAAEyJ,EAAYzJ,EAAA,GAE9B,OACEyE,eAAAC,WAAA,CAAAC,SAAA,CACEC,cAAC8E,IAAM,CAACC,GAAG,OAAO3D,QAAQ,OAAO4D,OAAO,KAAIjF,SAC1CF,eAACO,IAAS,CAACF,OAAK,EAAAH,SAAA,CACdC,cAAC8E,IAAOG,MAAK,CAACC,GAAIC,IAAMC,GAAG,IAAGrF,SAAC,wBAG/BC,cAAC8E,IAAOO,OAAM,CAAC,gBAAc,WAC7BrF,cAAC8E,IAAOQ,SAAQ,CAACrH,GAAG,SAAQ8B,SAC1BF,eAAC0F,IAAG,CAACpF,UAAU,UAASJ,SAAA,CACtBC,cAACuF,IAAIJ,KAAI,CAACD,GAAIC,IAAMC,GAAG,IAAGrF,SAAC,qBAI1BT,EAAKC,WACJM,eAAAC,WAAA,CAAAC,SAAA,CACEC,cAACuF,IAAIJ,KAAI,CAACD,GAAIC,IAAMC,GAAG,SAAQrF,SAAC,mBAGhCC,cAACuF,IAAIJ,KAAI,CAACnD,QAAS1C,EAAKkG,OAAOzF,SAAC,cAGlCC,cAACuF,IAAIJ,KAAI,CAACnD,QAAS,kBAAM6C,GAAa,EAAK,EAAC9E,SAAC,4BAOvDC,cAACyF,IAAK,CACJxE,KAAK,KACLkD,KAAMS,EACNc,OAAQ,kBAAMb,GAAa,EAAM,EACjC,kBAAgB,eAAc9E,SAE9BF,eAAC8F,IAAIvF,UAAS,CAACwF,iBAAiB,QAAO7F,SAAA,CACrCC,cAACyF,IAAMI,OAAM,CAACC,aAAW,EAAA/F,SACvBC,cAACyF,IAAM7D,MAAK,CAAC3D,GAAG,eAAc8B,SAC5BF,eAAC0F,IAAG,CAACnE,QAAQ,QAAOrB,SAAA,CAClBC,cAACuF,IAAIQ,KAAI,CAAAhG,SACPC,cAACuF,IAAIJ,KAAI,CAACa,SAAS,QAAOjG,SAAC,YAE7BC,cAACuF,IAAIQ,KAAI,CAAAhG,SACPC,cAACuF,IAAIJ,KAAI,CAACa,SAAS,SAAQjG,SAAC,qBAKpCC,cAACyF,IAAM9D,KAAI,CAAA5B,SACTF,eAAC8F,IAAIM,QAAO,CAAAlG,SAAA,CACVC,cAAC2F,IAAIO,KAAI,CAACF,SAAS,QAAOjG,SACxBC,cAACyE,EAAS,CAAC0B,iBAAkB,kBAAMtB,GAAa,EAAM,MAExD7E,cAAC2F,IAAIO,KAAI,CAACF,SAAS,SAAQjG,SACzBC,cAACoG,EAAU,CAACD,iBAAkB,kBAAMtB,GAAa,EAAM,kBAQvE,E,iDClEMwB,GAAWC,YAAe,CAC9BC,IAAK,aAGDC,GAAWC,cAAW,SAACC,EAAClK,GAAmB,IAAfmK,EAAOnK,EAAPmK,QAC1B3N,EAAQM,aAAaC,QAAQ,YACnC,MAAO,CACLoN,QAAOnD,wBAAA,GACFmD,GAAO,IACVC,cAAe5N,EAAK,UAAAyE,OAAazE,GAAU,KAGjD,IAEM6N,GAAS,IAAIC,KAAa,CAC9BC,KAAMP,GAAS/I,OAAO4I,IACtBW,MAAO,IAAIC,OAoBEC,OAjBf,WACE,OACElH,cAACmH,KAAc,CAACN,OAAQA,GAAO9G,SAC7BC,cAACoH,IAAM,CAAArH,SACLF,eAAAC,WAAA,CAAAC,SAAA,CACEC,cAAC8E,EAAM,IACPjF,eAACwH,IAAM,CAAAtH,SAAA,CACLC,cAACsH,IAAK,CAACC,KAAK,IAAIC,QAAUxH,cAAC/E,EAAW,MACtC+E,cAACsH,IAAK,CAACC,KAAK,SAASC,QAAUxH,cAACkC,EAAU,MAC1ClC,cAACsH,IAAK,CAACG,OAAQ,kBAAMzH,cAAA,MAAIG,UAAU,YAAWJ,SAAC,eAAgB,aAM3E,ECpCA2H,IAASD,OACPzH,cAAC2H,IAAMC,WAAU,CAAA7H,SACfC,cAACkH,GAAG,MAENW,SAASC,eAAe,Q","file":"static/js/main.2cbb3c13.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation loginUser($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $password: String!, $email: String!) {\r\n    addUser(username: $username, password: $password, email: $email) {\r\n      user {\r\n        _id\r\n        username\r\n        email\r\n        bookCount\r\n        savedBooks {\r\n          authors\r\n          bookId\r\n          image\r\n          link\r\n          title\r\n          description\r\n        }\r\n      }\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($input: SavedBookInput!) {\r\n    saveBook(input: $input) {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        # _id\r\n        bookId\r\n        authors\r\n        image\r\n        link\r\n        title\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n  mutation removeBook($bookId: ID!) {\r\n    removeBook(bookId: $bookId) {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        # _id\r\n        bookId\r\n        authors\r\n        image\r\n        link\r\n        title\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { saveBook, searchGoogleBooks } from '../utils/API';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\n\r\nimport { SAVE_BOOK } from '../utils/mutations';\r\nimport {useMutation} from '@apollo/client';\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  const [saveBook, {error}] = useMutation(SAVE_BOOK );\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // const response = await saveBook(bookToSave, token);\r\n      // if (!response.ok) {\r\n      //   throw new Error('something went wrong!');\r\n      // } // Replace the top with the following:\r\n      const { data } = await saveBook({\r\n        variables: { input: bookToSave }\r\n      });\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name='searchInput'\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type='text'\r\n                  size='lg'\r\n                  placeholder='Search for a book'\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type='submit' variant='success' size='lg'>\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? (\r\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                      className='btn-block btn-info'\r\n                      onClick={() => handleSaveBook(book.bookId)}>\r\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                        ? 'This book has already been saved!'\r\n                        : 'Save this Book!'}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n  return fetch(\"/api/users/me\", {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport const createUser = (userData) => {\r\n  return fetch(\"/api/users\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const loginUser = (userData) => {\r\n  return fetch(\"/api/users/login\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\n// save book data for a logged in user\r\nexport const saveBook = (bookData, token) => {\r\n  return fetch(\"/api/users\", {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(bookData),\r\n  });\r\n};\r\n\r\n// remove saved book data for a logged in user\r\nexport const deleteBook = (bookId, token) => {\r\n  return fetch(`/api/users/books/${bookId}`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\n// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_ME = gql`\r\n  {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        # _id\r\n        bookId\r\n        authors\r\n        image\r\n        link\r\n        title\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { Jumbotron, Container, CardColumns, Card, Button, } from \"react-bootstrap\";\r\n\r\n//import { getMe, deleteBook } from '../utils/API';\r\nimport { GET_ME } from \"../utils/queries\";\r\n\r\nimport Auth from \"../utils/auth\";\r\n\r\nimport { removeBookId } from '../utils/localStorage';\r\nimport { REMOVE_BOOK } from \"../utils/mutations\";\r\n\r\nconst SavedBooks = () => {\r\n  const { loading, data } = useQuery(GET_ME);\r\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\r\n\r\n  const userData = data?.me || [];\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      //const response = await deleteBook(bookId, token);\r\n      // changed the top witht the following:\r\n      const { data } = await removeBook({\r\n        variables: { bookId },\r\n      });\r\n\r\n      // if (!response.ok) {\r\n      //   throw new Error(\"something went wrong!\");\r\n      // }\r\n\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so // changed !userDataLength to 'loading'.\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n\r\n  // // sync localStorage with what was returned from the userData query\r\n  // const savedBookIds = userData.savedBooks.map((book) => book.bookId);\r\n  // saveBookIds(savedBookIds);\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${\r\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\r\n              }:`\r\n            : \"You have no saved books!\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button\r\n                    className=\"btn-block btn-danger\"\r\n                    onClick={() => handleDeleteBook(book.bookId)}\r\n                  >\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\n\r\n//import { addUser } from '../utils/API';\r\nimport { ADD_USER } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\nimport { useMutation} from \"@apollo/client\"\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      // const response = await addUser(userFormData);\r\n      // if (!response.ok) {\r\n      //   throw new Error('something went wrong!');\r\n      // }\r\n\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData },\r\n      });\r\n      //console.log(user);\r\n      Auth.login(data.addUser.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your username\"\r\n            name=\"username\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Username is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            placeholder=\"Your email address\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={\r\n            !(\r\n              userFormData.username &&\r\n              userFormData.email &&\r\n              userFormData.password\r\n            )\r\n          }\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\n//import { loginUser } from '../utils/API'||| Changed import from API to mutation fir log in\r\nimport { LOGIN_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [login] = useMutation(LOGIN_USER);\r\n// deleted {error} from above\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      // const response = await loginUser(userFormData);\r\n      // if (!response.ok) {\r\n      //   throw new Error('something went wrong!');\r\n      // }\r\n    \r\n      const { data } = await login({\r\n        variables: {...userFormData },\r\n      });\r\n      //console.log(user);\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport SearchBooks from \"./pages/SearchBooks\";\r\nimport SavedBooks from \"./pages/SavedBooks\";\r\nimport Navbar from \"./components/Navbar\";\r\n// Add Apollo Library\r\nimport { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <>\r\n          <Navbar />\r\n          <Routes>\r\n            <Route path=\"/\" element={ <SearchBooks/> } />\r\n            <Route path=\"/saved\" element={ <SavedBooks/> } />\r\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\r\n          </Routes>\r\n        </>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}